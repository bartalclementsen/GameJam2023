@foreach(Coin coin in Coins)
{
    <div class="coin">
        <div class="coin-row">
            <img src="@GetIconLink(coin.Name)">
        </div>
        <div class="coin-row">
            <div class="element-row">
                <input type="button" class="button buy" @onclick="() => Buy(coin.Id, 1)" value="+1" />
                <input type="button" class="button buy" @onclick="() => Buy(coin.Id, 10)" value="+10" />
                <input type="button" class="button buy" @onclick="() => Buy(coin.Id, 100)" value="+10" />
            </div>
            <div class="element-row">
                <input type="button" class="button sell" @onclick="() => Sell(coin.Id, 1)" value="-1" />
                <input type="button" class="button sell" @onclick="() => Sell(coin.Id, 10)" value="-10" />
                <input type="button" class="button sell" @onclick="() => Sell(coin.Id, 100)" value="-10" />
            </div>
            <div class="element-row">
                <div class="coin-info">
                    @coin.Id
                </div>
                <div class="coin-info">
                    @coin.Name
                </div>
            </div>
        </div>
    </div>
}


@code {

    [Parameter]
    public EventCallback<CoinOrder> OnBuy { get; set; }

    [Parameter]
    public EventCallback<CoinOrder> OnSell { get; set; }

    private List<Coin> Coins = new List<Coin>();

    protected override void OnInitialized()
    {
        Coins = new List<Coin>();
    }

    internal void HandleNewGameEvent(GameEvent gameEvent)
    {
        if (gameEvent.NewCoins != null)
        {
            foreach (Coin coin in gameEvent.NewCoins)
            {
                Coins.Add(coin);
            }
        }

        if (gameEvent.RemoveCoins != null)
        {
            foreach (Coin coin in gameEvent.RemoveCoins)
            {
                Coins.Remove(coin);
            }
        }
        StateHasChanged();
    }

    private string GetIconLink(string coinName)
    {
        return coinName switch
        {
            "Binance Coin" => "https://s2.coinmarketcap.com/static/img/coins/64x64/4687.png",
            "Bitcoin" => "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
            "Cardano" => "https://s2.coinmarketcap.com/static/img/coins/64x64/2010.png",
            "Chainlink" => "https://s2.coinmarketcap.com/static/img/coins/64x64/1975.png",
            "Crypto.com Coin" => "https://static.crypto.com/layout/navbar/company-logos/white.png",
            "Dogecoin" => "https://s2.coinmarketcap.com/static/img/coins/64x64/74.png",
            "EOS" => "https://s2.coinmarketcap.com/static/img/coins/64x64/1765.png",
            "Ethereum" => "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            "IOTA" => "https://s2.coinmarketcap.com/static/img/coins/64x64/1720.png",
            "Litecoin" => "https://s2.coinmarketcap.com/static/img/coins/64x64/2.png",
            "Monero" => "https://s2.coinmarketcap.com/static/img/coins/64x64/328.png",
            "NEM" => "https://s2.coinmarketcap.com/static/img/coins/64x64/873.png",
            "Stellar" => "https://s2.coinmarketcap.com/static/img/coins/64x64/512.png",
            "Tether" => "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
            "TRON" => "https://s2.coinmarketcap.com/static/img/coins/64x64/1958.png",
            "XRP" => "https://s2.coinmarketcap.com/static/img/coins/64x64/52.png",
            _ => "https://s2.coinmarketcap.com/static/cloud/img/dex/default-icon-day.svg?_=937d1f0",
        };
    }

    private async void Buy(int coinId, int amount)
    {
        if (OnBuy.HasDelegate)
        {       
            await OnBuy.InvokeAsync(new CoinOrder()
            {
                CoinId = coinId,
                Amount = amount
            });
        }
    }

    private async void Sell(int coinId, int amount)
    {
        if(OnSell.HasDelegate)
        {
            await OnSell.InvokeAsync(new CoinOrder()
            {
                CoinId = coinId,
                Amount = amount
            });
        }

    }

    public record CoinOrder
    {
        public int CoinId { get; set; }

        public int Amount { get; set; }
    }
}
