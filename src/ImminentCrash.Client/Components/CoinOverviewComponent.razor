@using ImminentCrash.Client.Models;
@inject IJSRuntime JSRuntime;

@foreach(DataItem coin in coins)
{
    <div class="coin" style="background-color: @(coin.Color); ">
        <div class="coin-row">
            <img src="@GetIconLink(coin.Name)" title="@coin.Name" />
        </div>
        <div class="coin-row">
            <div class="element-row">
                <input type="button" class="button buy" disabled="@(coin.CanBuy1 == false)" @onclick="() => Buy(coin, 1)" value="+1" />
                <input type="button" class="button buy" disabled="@(coin.CanBuy10 == false)" @onclick="() => Buy(coin, 10)" value="+10" />
                <input type="button" class="button buy" disabled="@(coin.CanBuy100 == false)" @onclick="() => Buy(coin, 100)" value="+100" />
            </div>
            <div class="element-row">
                <input type="button" class="button sell" disabled="@(coin.CanSell1 == false)" @onclick="() => Sell(coin, 1)" value="-1" />
                <input type="button" class="button sell" disabled="@(coin.CanSell10 == false)" @onclick="() => Sell(coin, 10)" value="-10" />
                <input type="button" class="button sell" disabled="@(coin.CanSell100 == false)" @onclick="() => Sell(coin, 100)" value="-100" />
            </div>
            <div class="element-row">
                <div class="coin-amount" title="@coin.Amount">
                    @coin.Amount
                </div>
                <div class="coin-value" style="color: @(coin.Value < 0 ? "red" : "green")" title="@coin.Value">
                    $@coin.Value.ToString("0.00")
                </div>
            </div>
        </div>
    </div>
    <audio src="/audio/cash-register-purchase.mp3" id="buyAudio"></audio>
}

@code {
    [Parameter]
    public EventCallback<CoinOrder> OnBuy { get; set; }

    [Parameter]
    public EventCallback<CoinOrder> OnSell { get; set; }

    private List<DataItem> coins = new List<DataItem>();

    protected override void OnInitialized()
    {
        coins = new List<DataItem>();
    }

    internal void HandleNewGameEvent(GameEvent gameEvent)
    {
        if (gameEvent.NewCoins != null)
        {
            foreach (Coin coin in gameEvent.NewCoins)
            {
                coins.Add(new DataItem(coin));
            }
        }

        if (gameEvent.RemoveCoins != null)
        {
            foreach (Coin coin in gameEvent.RemoveCoins)
            {
                var foundCoin = coins.FirstOrDefault(c => c.Id == coin.Id);
                if(foundCoin != null) 
                    coins.Remove(foundCoin);
            }
        }

        foreach(var coinAmount in gameEvent.CoinAmounts ?? Enumerable.Empty<CoinAmount>())
        {
            coins
                .FirstOrDefault(c => c.Id == coinAmount.CoinId)
                ?.Apply(coinAmount);
        }

        // Apply can move
        foreach (var coin in coins)
        {
            var coinMovement = gameEvent.CoinMovements?.FirstOrDefault(c => c.Id == coin.Id);
            var amount = coinMovement?.Amount ?? 0;

            coin.CanBuy1 = amount * 1 <= gameEvent.CurrentBalance;
            coin.CanBuy10 = amount * 10 <= gameEvent.CurrentBalance;
            coin.CanBuy100 = amount * 100 <= gameEvent.CurrentBalance;
        }

        StateHasChanged();
    }

    private string GetIconLink(string coinName)
    {
        return coinName switch
        {
            "Binance Coin" => "https://s2.coinmarketcap.com/static/img/coins/64x64/4687.png",
            "Bitcoin" => "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
            "Cardano" => "https://s2.coinmarketcap.com/static/img/coins/64x64/2010.png",
            "Chainlink" => "https://s2.coinmarketcap.com/static/img/coins/64x64/1975.png",
            "Crypto.com Coin" => "https://static.crypto.com/layout/navbar/company-logos/white.png",
            "Dogecoin" => "https://s2.coinmarketcap.com/static/img/coins/64x64/74.png",
            "EOS" => "https://s2.coinmarketcap.com/static/img/coins/64x64/1765.png",
            "Ethereum" => "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            "IOTA" => "https://s2.coinmarketcap.com/static/img/coins/64x64/1720.png",
            "Litecoin" => "https://s2.coinmarketcap.com/static/img/coins/64x64/2.png",
            "Monero" => "https://s2.coinmarketcap.com/static/img/coins/64x64/328.png",
            "NEM" => "https://s2.coinmarketcap.com/static/img/coins/64x64/873.png",
            "Stellar" => "https://s2.coinmarketcap.com/static/img/coins/64x64/512.png",
            "Tether" => "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
            "TRON" => "https://s2.coinmarketcap.com/static/img/coins/64x64/1958.png",
            "XRP" => "https://s2.coinmarketcap.com/static/img/coins/64x64/52.png",
            _ => "https://s2.coinmarketcap.com/static/cloud/img/dex/default-icon-day.svg?_=937d1f0",
        };
    }

    private async void Buy(DataItem coin, int amount)
    {
        if (coin.CanBuy1 == false)
            return;

        if (coin.CanBuy10 == false && amount == 10)
            return;

        if (coin.CanBuy100 == false && amount == 100)
            return;

        if (OnBuy.HasDelegate)
        {       
            await OnBuy.InvokeAsync(new CoinOrder()
            {
                CoinId = coin.Id,
                Amount = amount
            });
        }
        
        try
        {
            await JSRuntime.InvokeVoidAsync("audioFunctions.playAudio", "buyAudio");
        }
        catch
        {

        }
    }

    private async void Sell(DataItem coin, int amount)
    {
        if (coin.CanSell1 == false)
            return;

        if (coin.CanSell10 == false && amount == 10)
            return;

        if (coin.CanSell100 == false && amount == 100)
            return;

        if(OnSell.HasDelegate)
        {
            await OnSell.InvokeAsync(new CoinOrder()
            {
                    CoinId = coin.Id,
                Amount = amount
            });
        }
        try
        {
            await JSRuntime.InvokeVoidAsync("audioFunctions.playAudio", "buyAudio");
        }
        catch
        {
            
        }


    }

    public record CoinOrder
    {
        public int CoinId { get; set; }

        public int Amount { get; set; }
    }

    public class DataItem
    {
        public int Id { get; set; }

        public string Name { get; set; } = string.Empty;

        public int Amount { get; set; }

        public decimal Value { get; set; }

        public bool CanBuy1 { get; set; }

        public bool CanBuy10 { get; set; }

        public bool CanBuy100 { get; set; }

        public bool CanSell1 => Amount >= 1;

        public bool CanSell10 => Amount >= 10;

        public bool CanSell100 => Amount >= 100;

        public string Color { get; set; }

        public DataItem(Coin coin)
        {
            Id = coin.Id;
            Name = coin.Name;

            Color = CoinColors.GetColor(coin.Id - 1);
        }

        public void Apply(CoinAmount coinAmount)
        {
            Amount = coinAmount.Amount;
            Value = coinAmount.Value;
        }

    }
}
